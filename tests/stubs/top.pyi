from __future__ import annotations
import cocotb.handle
import cocotb.types
from typing import overload, Literal

# This file was automatically generated by copra
# It provides type stubs for your HDL design for use with cocotb

class Top(cocotb.handle.HierarchyObject):
    VIDEO_MODE: cocotb.handle.LogicArrayObject
    btn: cocotb.handle.LogicObject
    clk_display: cocotb.handle.LogicObject
    clk_ext: cocotb.handle.LogicObject
    clk_system: cocotb.handle.LogicObject
    clock_manager_inst: ClockManagerInst
    display_inst: DisplayInst
    led: cocotb.handle.LogicObject
    reset: cocotb.handle.LogicObject
    rstn_display: cocotb.handle.LogicObject
    rstn_system: cocotb.handle.LogicObject
    vga_blue: cocotb.handle.LogicArrayObject
    vga_green: cocotb.handle.LogicArrayObject
    vga_hsync: cocotb.handle.LogicObject
    vga_red: cocotb.handle.LogicArrayObject
    vga_vsync: cocotb.handle.LogicObject

    @overload
    def __getitem__(self, name: Literal['VIDEO_MODE']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['btn']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_display']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_ext']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_system']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['led']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['reset']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn_display']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn_system']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['vga_blue']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['vga_green']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['vga_hsync']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['vga_red']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['vga_vsync']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clock_manager_inst']) -> ClockManagerInst: ...

    @overload
    def __getitem__(self, name: Literal['display_inst']) -> DisplayInst: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class ClockManagerInst(cocotb.handle.HierarchyObject):
    CLK_DISPLAY: cocotb.handle.LogicArrayObject
    CLK_SYSTEM: cocotb.handle.LogicArrayObject
    bufg_ext_clk_inst: BufgExtClkInst
    clk: cocotb.handle.LogicObject
    clk_display: cocotb.handle.LogicObject
    clk_ext: cocotb.handle.LogicObject
    clk_system: cocotb.handle.LogicObject
    clk_system_inst: ClkSystemInst
    clock_display_inst: ClockDisplayInst
    reset: cocotb.handle.LogicObject
    rstn: cocotb.handle.LogicObject
    rstn_display: cocotb.handle.LogicObject
    rstn_system: cocotb.handle.LogicObject

    @overload
    def __getitem__(self, name: Literal['CLK_DISPLAY']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['CLK_SYSTEM']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['clk']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_display']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_ext']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_system']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['reset']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn_display']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn_system']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['bufg_ext_clk_inst']) -> BufgExtClkInst: ...

    @overload
    def __getitem__(self, name: Literal['clk_system_inst']) -> ClkSystemInst: ...

    @overload
    def __getitem__(self, name: Literal['clock_display_inst']) -> ClockDisplayInst: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class BufgExtClkInst(cocotb.handle.HierarchyObject):
    I: cocotb.handle.LogicObject
    O: cocotb.handle.LogicObject

    @overload
    def __getitem__(self, name: Literal['I']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['O']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class ClkSystemInst(cocotb.handle.HierarchyObject):
    CLK_DIVIDE_F: cocotb.handle.RealObject
    CLK_PERIOD: cocotb.handle.RealObject
    CLOCK_CONFIG: cocotb.handle.LogicArrayObject
    MASTER_DIVIDE: cocotb.handle.LogicArrayObject
    MASTER_MULTIPLY: cocotb.handle.RealObject
    buf_clk: BufClk
    clk_in: cocotb.handle.LogicObject
    clk_out: cocotb.handle.LogicObject
    clk_out_unbuf: cocotb.handle.LogicObject
    clock_inst: ClockInst
    feedback: cocotb.handle.LogicObject
    locked: cocotb.handle.LogicObject
    rstn_in: cocotb.handle.LogicObject
    rstn_out: cocotb.handle.LogicObject
    sync: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal['CLK_DIVIDE_F']) -> cocotb.handle.RealObject: ...

    @overload
    def __getitem__(self, name: Literal['CLK_PERIOD']) -> cocotb.handle.RealObject: ...

    @overload
    def __getitem__(self, name: Literal['CLOCK_CONFIG']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['MASTER_DIVIDE']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['MASTER_MULTIPLY']) -> cocotb.handle.RealObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_in']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_out']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_out_unbuf']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['feedback']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['locked']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn_in']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn_out']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['sync']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['buf_clk']) -> BufClk: ...

    @overload
    def __getitem__(self, name: Literal['clock_inst']) -> ClockInst: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class BufClk(cocotb.handle.HierarchyObject):
    I: cocotb.handle.LogicObject
    O: cocotb.handle.LogicObject

    @overload
    def __getitem__(self, name: Literal['I']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['O']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class ClockInst(cocotb.handle.HierarchyObject):
    CLKFBIN: cocotb.handle.LogicObject
    CLKFBOUT: cocotb.handle.LogicObject
    CLKFBOUT_MULT_F: cocotb.handle.RealObject
    CLKIN1: cocotb.handle.LogicObject
    CLKIN1_PERIOD: cocotb.handle.RealObject
    CLKOUT0: cocotb.handle.LogicObject
    CLKOUT0_DIVIDE_F: cocotb.handle.RealObject
    DIVCLK_DIVIDE: cocotb.handle.LogicArrayObject
    LOCKED: cocotb.handle.LogicObject
    RST: cocotb.handle.LogicObject

    @overload
    def __getitem__(self, name: Literal['CLKFBIN']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['CLKFBOUT']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['CLKFBOUT_MULT_F']) -> cocotb.handle.RealObject: ...

    @overload
    def __getitem__(self, name: Literal['CLKIN1']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['CLKIN1_PERIOD']) -> cocotb.handle.RealObject: ...

    @overload
    def __getitem__(self, name: Literal['CLKOUT0']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['CLKOUT0_DIVIDE_F']) -> cocotb.handle.RealObject: ...

    @overload
    def __getitem__(self, name: Literal['DIVCLK_DIVIDE']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['LOCKED']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['RST']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class ClockDisplayInst(cocotb.handle.HierarchyObject):
    CLK_DIVIDE_F: cocotb.handle.RealObject
    CLK_PERIOD: cocotb.handle.RealObject
    CLOCK_CONFIG: cocotb.handle.LogicArrayObject
    MASTER_DIVIDE: cocotb.handle.LogicArrayObject
    MASTER_MULTIPLY: cocotb.handle.RealObject
    buf_clk: BufClk
    clk_in: cocotb.handle.LogicObject
    clk_out: cocotb.handle.LogicObject
    clk_out_unbuf: cocotb.handle.LogicObject
    clock_inst: ClockInst
    feedback: cocotb.handle.LogicObject
    locked: cocotb.handle.LogicObject
    rstn_in: cocotb.handle.LogicObject
    rstn_out: cocotb.handle.LogicObject
    sync: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal['CLK_DIVIDE_F']) -> cocotb.handle.RealObject: ...

    @overload
    def __getitem__(self, name: Literal['CLK_PERIOD']) -> cocotb.handle.RealObject: ...

    @overload
    def __getitem__(self, name: Literal['CLOCK_CONFIG']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['MASTER_DIVIDE']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['MASTER_MULTIPLY']) -> cocotb.handle.RealObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_in']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_out']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_out_unbuf']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['feedback']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['locked']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn_in']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn_out']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['sync']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['buf_clk']) -> BufClk: ...

    @overload
    def __getitem__(self, name: Literal['clock_inst']) -> ClockInst: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class DisplayInst(cocotb.handle.HierarchyObject):
    BUFFER_HEIGHT: cocotb.handle.LogicArrayObject
    BUFFER_WIDTH: cocotb.handle.LogicArrayObject
    H_BACK_PORCH: cocotb.handle.LogicArrayObject
    H_FRONT_PORCH: cocotb.handle.LogicArrayObject
    H_RESOLUTION: cocotb.handle.LogicArrayObject
    H_SYNC: cocotb.handle.LogicArrayObject
    LINEHEIGHT: cocotb.handle.LogicArrayObject
    LINEWIDTH: cocotb.handle.LogicArrayObject
    SCALE: cocotb.handle.LogicArrayObject
    VH: cocotb.handle.LogicArrayObject
    VIDEO_MODE: cocotb.handle.LogicArrayObject
    VW: cocotb.handle.LogicArrayObject
    V_BACK_PORCH: cocotb.handle.LogicArrayObject
    V_FRONT_PORCH: cocotb.handle.LogicArrayObject
    V_RESOLUTION: cocotb.handle.LogicArrayObject
    V_SYNC: cocotb.handle.LogicArrayObject
    buffer_inst: BufferInst
    clk_pixel: cocotb.handle.LogicObject
    data_enable: cocotb.handle.LogicObject
    display_b: cocotb.handle.LogicArrayObject
    display_g: cocotb.handle.LogicArrayObject
    display_r: cocotb.handle.LogicArrayObject
    fb_data: cocotb.handle.LogicArrayObject
    hsync: cocotb.handle.LogicObject
    hsync_delay: cocotb.handle.LogicObject
    hsync_delay2: cocotb.handle.LogicObject
    hsync_nopol: cocotb.handle.LogicObject
    paint_b: cocotb.handle.LogicArrayObject
    paint_g: cocotb.handle.LogicArrayObject
    paint_r: cocotb.handle.LogicArrayObject
    pixel_addr: cocotb.handle.LogicArrayObject
    rstn_pixel: cocotb.handle.LogicObject
    vga_blue: cocotb.handle.LogicArrayObject
    vga_green: cocotb.handle.LogicArrayObject
    vga_hsync: cocotb.handle.LogicObject
    vga_red: cocotb.handle.LogicArrayObject
    vga_vsync: cocotb.handle.LogicObject
    vsync: cocotb.handle.LogicObject
    vsync_delay: cocotb.handle.LogicObject
    vsync_delay2: cocotb.handle.LogicObject
    vsync_nopol: cocotb.handle.LogicObject
    x: cocotb.handle.LogicArrayObject
    y: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal['BUFFER_HEIGHT']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['BUFFER_WIDTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['H_BACK_PORCH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['H_FRONT_PORCH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['H_RESOLUTION']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['H_SYNC']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['LINEHEIGHT']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['LINEWIDTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['SCALE']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['VH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['VIDEO_MODE']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['VW']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['V_BACK_PORCH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['V_FRONT_PORCH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['V_RESOLUTION']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['V_SYNC']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_pixel']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['data_enable']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['display_b']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['display_g']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['display_r']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['fb_data']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['hsync']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['hsync_delay']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['hsync_delay2']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['hsync_nopol']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['paint_b']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['paint_g']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['paint_r']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['pixel_addr']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn_pixel']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['vga_blue']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['vga_green']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['vga_hsync']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['vga_red']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['vga_vsync']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['vsync']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['vsync_delay']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['vsync_delay2']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['vsync_nopol']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['x']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['y']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['buffer_inst']) -> BufferInst: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class BufferInst(cocotb.handle.HierarchyObject):
    FILE_SIZE: cocotb.handle.LogicArrayObject
    FILE_SOURCE: cocotb.handle.StringObject
    addr: cocotb.handle.LogicArrayObject
    clk: cocotb.handle.LogicObject
    data: cocotb.handle.LogicArrayObject
    memory: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    rstn: cocotb.handle.LogicObject

    @overload
    def __getitem__(self, name: Literal['FILE_SIZE']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['FILE_SOURCE']) -> cocotb.handle.StringObject: ...

    @overload
    def __getitem__(self, name: Literal['addr']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['clk']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['data']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['memory']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['rstn']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...

