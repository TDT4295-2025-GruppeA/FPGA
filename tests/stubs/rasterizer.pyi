from __future__ import annotations
import cocotb.handle
import cocotb.types
from typing import overload, Literal

# This file was automatically generated by copra
# It provides type stubs for your HDL design for use with cocotb

class Rasterizer(cocotb.handle.HierarchyObject):
    HEIGHT: cocotb.handle.LogicArrayObject
    WIDTH: cocotb.handle.LogicArrayObject
    c1: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    c2: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    c3: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    clk: cocotb.handle.LogicObject
    cros3: Cros3
    cross1: Cross1
    cross2: Cross2
    offset_x: cocotb.handle.LogicArrayObject
    offset_y: cocotb.handle.LogicArrayObject
    p: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    p1: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    p2: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    p3: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    pixel_covered: cocotb.handle.LogicObject
    pixel_x: cocotb.handle.LogicArrayObject
    pixel_y: cocotb.handle.LogicArrayObject
    ready: cocotb.handle.LogicObject
    rstn: cocotb.handle.LogicObject
    start: cocotb.handle.LogicObject
    state: cocotb.handle.LogicObject
    sub1: Sub1
    sub2: Sub2
    sub3: Sub3
    sub4: Sub4
    sub5: Sub5
    sub6: Sub6
    v1: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    v2: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    v3: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    vertex0: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    vertex1: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    vertex2: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    x: cocotb.handle.LogicArrayObject
    y: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal['HEIGHT']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['WIDTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['c1']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['c2']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['c3']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['clk']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['offset_x']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['offset_y']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['p']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['p1']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['p2']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['p3']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['pixel_covered']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['pixel_x']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['pixel_y']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['ready']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['start']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['state']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['v1']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['v2']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['v3']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['vertex0']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['vertex1']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['vertex2']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['x']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['y']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['cros3']) -> Cros3: ...

    @overload
    def __getitem__(self, name: Literal['cross1']) -> Cross1: ...

    @overload
    def __getitem__(self, name: Literal['cross2']) -> Cross2: ...

    @overload
    def __getitem__(self, name: Literal['sub1']) -> Sub1: ...

    @overload
    def __getitem__(self, name: Literal['sub2']) -> Sub2: ...

    @overload
    def __getitem__(self, name: Literal['sub3']) -> Sub3: ...

    @overload
    def __getitem__(self, name: Literal['sub4']) -> Sub4: ...

    @overload
    def __getitem__(self, name: Literal['sub5']) -> Sub5: ...

    @overload
    def __getitem__(self, name: Literal['sub6']) -> Sub6: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class Cros3(cocotb.handle.HierarchyObject):
    lhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    rhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]

    @overload
    def __getitem__(self, name: Literal['lhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['rhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class Cross1(cocotb.handle.HierarchyObject):
    lhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    rhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]

    @overload
    def __getitem__(self, name: Literal['lhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['rhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class Cross2(cocotb.handle.HierarchyObject):
    lhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    rhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]

    @overload
    def __getitem__(self, name: Literal['lhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['rhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class Sub1(cocotb.handle.HierarchyObject):
    N: cocotb.handle.LogicArrayObject
    lhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    rhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    unnamedblk1: Unnamedblk1

    @overload
    def __getitem__(self, name: Literal['N']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['lhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['rhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['unnamedblk1']) -> Unnamedblk1: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class Unnamedblk1(cocotb.handle.HierarchyObject):
    i: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal['i']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class Sub2(cocotb.handle.HierarchyObject):
    N: cocotb.handle.LogicArrayObject
    lhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    rhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    unnamedblk1: Unnamedblk1

    @overload
    def __getitem__(self, name: Literal['N']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['lhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['rhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['unnamedblk1']) -> Unnamedblk1: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class Sub3(cocotb.handle.HierarchyObject):
    N: cocotb.handle.LogicArrayObject
    lhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    rhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    unnamedblk1: Unnamedblk1

    @overload
    def __getitem__(self, name: Literal['N']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['lhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['rhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['unnamedblk1']) -> Unnamedblk1: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class Sub4(cocotb.handle.HierarchyObject):
    N: cocotb.handle.LogicArrayObject
    lhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    rhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    unnamedblk1: Unnamedblk1

    @overload
    def __getitem__(self, name: Literal['N']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['lhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['rhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['unnamedblk1']) -> Unnamedblk1: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class Sub5(cocotb.handle.HierarchyObject):
    N: cocotb.handle.LogicArrayObject
    lhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    rhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    unnamedblk1: Unnamedblk1

    @overload
    def __getitem__(self, name: Literal['N']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['lhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['rhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['unnamedblk1']) -> Unnamedblk1: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class Sub6(cocotb.handle.HierarchyObject):
    N: cocotb.handle.LogicArrayObject
    lhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    rhs: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    unnamedblk1: Unnamedblk1

    @overload
    def __getitem__(self, name: Literal['N']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['lhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['rhs']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['unnamedblk1']) -> Unnamedblk1: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...

