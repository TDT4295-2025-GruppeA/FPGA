from __future__ import annotations
import cocotb.handle
import cocotb.types
from typing import overload, Literal

# This file was automatically generated by copra
# It provides type stubs for your HDL design for use with cocotb

class Asyncfifo(cocotb.handle.HierarchyObject):
    ADDRESS_WIDTH: cocotb.handle.LogicArrayObject
    LENGTH: cocotb.handle.LogicArrayObject
    MIN_LENGTH: cocotb.handle.LogicArrayObject
    WIDTH: cocotb.handle.LogicArrayObject
    data_in: cocotb.handle.LogicArrayObject
    data_out: cocotb.handle.LogicArrayObject
    empty: cocotb.handle.LogicObject
    fifo: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    full: cocotb.handle.LogicObject
    read_clk: cocotb.handle.LogicObject
    read_en: cocotb.handle.LogicObject
    read_ptr: cocotb.handle.LogicArrayObject
    read_ptr_synced: cocotb.handle.LogicArrayObject
    read_synchronizer: ReadSynchronizer
    rstn: cocotb.handle.LogicObject
    write_clk: cocotb.handle.LogicObject
    write_en: cocotb.handle.LogicObject
    write_ptr: cocotb.handle.LogicArrayObject
    write_ptr_synced: cocotb.handle.LogicArrayObject
    write_synchronizer: WriteSynchronizer

    @overload
    def __getitem__(self, name: Literal['ADDRESS_WIDTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['LENGTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['MIN_LENGTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['WIDTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['data_in']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['data_out']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['empty']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['fifo']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['full']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['read_clk']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['read_en']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['read_ptr']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['read_ptr_synced']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['write_clk']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['write_en']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['write_ptr']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['write_ptr_synced']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['read_synchronizer']) -> ReadSynchronizer: ...

    @overload
    def __getitem__(self, name: Literal['write_synchronizer']) -> WriteSynchronizer: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class ReadSynchronizer(cocotb.handle.HierarchyObject):
    WIDTH: cocotb.handle.LogicArrayObject
    binary_to_gray: BinaryToGray
    clk_dest: cocotb.handle.LogicObject
    data_in: cocotb.handle.LogicArrayObject
    data_out: cocotb.handle.LogicArrayObject
    gray_data: cocotb.handle.LogicArrayObject
    gray_to_binary: GrayToBinary
    rstn: cocotb.handle.LogicObject
    sync1: cocotb.handle.LogicArrayObject
    sync2: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal['WIDTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_dest']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['data_in']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['data_out']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['gray_data']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['sync1']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['sync2']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['binary_to_gray']) -> BinaryToGray: ...

    @overload
    def __getitem__(self, name: Literal['gray_to_binary']) -> GrayToBinary: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class BinaryToGray(cocotb.handle.HierarchyObject):
    WIDTH: cocotb.handle.LogicArrayObject
    binary: cocotb.handle.LogicArrayObject
    gray: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal['WIDTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['binary']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['gray']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class GrayToBinary(cocotb.handle.HierarchyObject):
    WIDTH: cocotb.handle.LogicArrayObject
    binary: cocotb.handle.LogicArrayObject
    gray: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal['WIDTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['binary']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['gray']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class WriteSynchronizer(cocotb.handle.HierarchyObject):
    WIDTH: cocotb.handle.LogicArrayObject
    binary_to_gray: BinaryToGray
    clk_dest: cocotb.handle.LogicObject
    data_in: cocotb.handle.LogicArrayObject
    data_out: cocotb.handle.LogicArrayObject
    gray_data: cocotb.handle.LogicArrayObject
    gray_to_binary: GrayToBinary
    rstn: cocotb.handle.LogicObject
    sync1: cocotb.handle.LogicArrayObject
    sync2: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal['WIDTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['clk_dest']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['data_in']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['data_out']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['gray_data']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['sync1']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['sync2']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['binary_to_gray']) -> BinaryToGray: ...

    @overload
    def __getitem__(self, name: Literal['gray_to_binary']) -> GrayToBinary: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...

