from __future__ import annotations
import cocotb.handle
import cocotb.types
from typing import overload, Literal

# This file was automatically generated by copra
# It provides type stubs for your HDL design for use with cocotb

class Shiftregister(cocotb.handle.HierarchyObject):
    SIZE: cocotb.handle.LogicArrayObject
    buffer: cocotb.handle.LogicArrayObject
    clk: cocotb.handle.LogicObject
    parallel_in: cocotb.handle.LogicArrayObject
    parallel_in_en: cocotb.handle.LogicObject
    parallel_out: cocotb.handle.LogicArrayObject
    rstn: cocotb.handle.LogicObject
    serial_in: cocotb.handle.LogicObject
    serial_out: cocotb.handle.LogicObject

    @overload
    def __getitem__(self, name: Literal['SIZE']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['buffer']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['clk']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['parallel_in']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['parallel_in_en']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['parallel_out']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['rstn']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['serial_in']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['serial_out']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...

