import functools

import pytest
import cocotb_test.simulator
import os

DIR_TESTS = os.path.join(os.path.abspath("."), "tests") # TODO: ability to change path

STUB_CODE = """
# This file was automatically generated by testtools.
# Required because of importlib's inability to import .pyi files
def __getattr__(name):
    return None
"""

def get_dependencies(verilog_module: str):
    # TODO: fail more gracefully
    with open("build/file_compile_order.txt") as f: # TODO: ability to change path
        dependencies = f.read().split("\n")
    for line in dependencies:
        if line.startswith(verilog_module):
            # Line contains file for this
            return line.split(verilog_module + " ", 1)[1].split(":")
    raise RuntimeError(f"Could not find file compile order for module '{verilog_module}'")


def create_test(toplevel: str, filename, module_name: str, testcase: str | None = None):
    def decorator(func):
        files = get_dependencies(toplevel)

        @functools.wraps(func)
        @pytest.mark.module(filename, module_name, testcase)
        def wrapper(*args, **kwargs):
            del args, kwargs  # ignore args

            # Setup stubs
            os.environ["COPRA_STUB_DIR"] = os.path.join(DIR_TESTS, "stubs")
            os.environ["COPRA_STUB_FILENAME"] = "".join((toplevel.lower(), ".pyi"))
            filename = os.path.join(DIR_TESTS, "stubs", toplevel.lower() + ".py")
            with open(filename, "w") as f:
                f.write(STUB_CODE)

            cocotb_test.simulator.run(
                simulator="verilator",
                verilog_sources=files,
                toplevel=toplevel,
                module=",".join(("copra.integration.autostub", module_name)),
                includes=["."],
                compile_args=["--structs-packed", "-DSIMULATION"],
                testcase=testcase,
                # Different simbuild dir to utilize cache on each module
                sim_build=f"build/test/simbuild_{toplevel}", # TODO: ability to change path
                python_search=[DIR_TESTS],
            )

        return wrapper

    return decorator
